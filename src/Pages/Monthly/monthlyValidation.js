import { toast } from "react-toastify";

const SERVICE_AREA_ZIPCODES = [
  "11102", "11106", "11103", "11105", "10162", "10128", "10028", "10044", "10075", "10021",
  "10029", "10035", "11101", "11370", "11377", "11104", "10065", "11120", "10155", "10022",
  "10454", "11109", "10150", "10153", "10151", "10152", "10154", "11372", "10055", "10026",
  "10171", "10025", "10172", "10081", "10087", "10105", "10017", "10167", "10104", "10103",
  "10111", "10179", "10177", "10023", "10109", "10114", "10102", "10169", "10024", "10020",
  "10174", "10170", "10106", "11371", "11369", "10107", "10112", "10176", "10166", "10158",
  "10168", "10173", "10178", "10037", "10165", "11222", "10455", "10175", "10101", "10474",
  "10027", "10016", "10451", "11378", "11373", "10030", "10115", "10036", "10019", "10069",
  "10123", "10120", "10122", "10118", "10010", "10119", "10121", "10018", "10116", "10001",
  "10060", "10110", "10199", "10039", "11368", "10242", "10031", "10009", "10456", "10249",
  "10459", "11211", "10003", "10276", "10113", "11379", "07020", "07093", "11356", "10011",
  "11247", "10032", "10473", "10452", "11249", "11374", "07010", "11237", "07086", "11206",
  "10012", "10014", "10002", "07022", "10472", "11354", "11251", "11351", "07047", "11221",
  "10457", "11352", "11380", "07087", "11375", "10013", "11385", "11355", "10278", "10460",
  "11386", "10090", "11205", "07030", "10108", "10117", "10124", "10125", "10126", "10129",
  "10130", "10131", "10132", "10133", "10138", "10156", "10157", "10159", "10160", "10163",
  "10164", "10185", "10203", "10211", "10212", "10213", "10256", "10258", "10259", "10260",
  "10261", "10265", "10268", "10269", "10272", "10273", "10274", "10275", "10285", "10286",
  "10453", "10007", "07024", "10038", "10279", "11367", "10040", "10282", "10008", "07657",
  "10277", "10033", "10045", "10080", "11357", "10281", "10462", "10271", "10270", "10005",
  "10043", "11201", "11202", "10006", "11216", "11242", "07650", "11241", "10280", "10041",
  "10004", "11424", "07310", "11243", "11421", "11233", "11415", "11245", "07311", "10461",
  "07307", "11217", "11238", "10458", "10034", "11213", "11358", "10468", "11418", "07302",
  "11207", "07096", "11416", "07097", "10465", "11208", "11365", "07605", "07094", "11212",
  "10463", "11225", "07660", "07643", "11439", "11366", "11231", "11360", "11417", "11435",
  "07632", "07306", "11215", "10467", "11419", "11432", "11359", "10469", "11256", "07304",
  "11431", "11361", "07308", "11451", "11405", "11425", "11499", "07072", "07074", "11203",
  "07303", "07399", "07395", "07631", "11420", "11414", "10475", "11232", "11226", "11433",
  "11239", "11364", "10471", "10464", "07603", "11423", "07606", "10470", "11218", "11236",
  "07608", "07073", "07666", "10466", "11436", "07699", "07099", "11363", "07305", "11427",
  "11022", "07071", "11412", "07604", "11362", "07602", "11210", "07075", "07670", "07601",
  "11428", "11219", "11220", "07032", "11434", "07070", "11024", "10705", "11023", "11230",
  "10550", "11021", "11429", "07031", "11426", "11204", "10551", "10704", "07644", "10553",
  "07057", "11234", "10702", "10803", "11020", "07621", "11411", "11005", "11004", "11430",
  "07607", "10805", "11437", "11228", "11209", "07002", "11229", "11413", "10552", "07626",
  "11042", "07029", "11001", "11002", "07105", "07014", "07055", "07026", "07646", "07661",
  "10802", "07662", "11223", "11693", "07109", "11422", "11252", "10801", "10701", "07110",
  "07628", "11003", "11214", "07104", "11030", "10708", "07627", "07663", "11235", "11040",
  "11050", "07620", "07101", "07184", "07188", "07189", "07191", "07192", "07193", "07195",
  "07198", "07199", "07102", "07175", "10703", "11580", "07012", "10301", "07011", "11582",
  "07114", "07407", "11224", "07107", "07641", "11096", "10310", "07015", "07649", "11581",
  "07201", "07003", "11692", "07624", "11010", "11694", "10710", "07652", "10709", "07103",
  "10707", "07653", "10305", "10804", "10304", "11516", "10538", "11507", "11695", "11691",
  "07013", "11690", "07019", "07503", "07017", "11576", "10313", "07108", "10302", "07028",
  "11596", "11598", "11565", "07513", "11531", "07504", "11697", "07630", "11501", "11577",
  "11557", "07410", "07043", "07018", "11563", "11552", "10706", "07042", "07112", "07640",
  "07648", "11547", "11530", "07514", "11579", "11559", "10303", "07206", "10543", "11548",
  "07106", "07051", "07501", "07050", "11509", "07111", "11518", "07509", "07510", "07511",
  "07533", "07543", "07544", "07505", "07647", "11514", "07524", "10583", "11570", "10964",
  "07207", "11551", "07676", "07452", "11550", "11571", "07205", "07009", "10522", "07522",
  "07044", "07208", "07675", "07424", "10502", "11599", "07507", "10314", "07202", "11549",
  "07502", "11542", "10311", "07450", "07079", "07451", "07642", "11568", "10306", "07052",
  "10983", "07506", "07538", "11572", "10503", "10976", "11545", "10528", "07512", "11553",
  "07040", "11555", "10530", "11590", "11558", "07423", "11556", "11510", "07508", "07083",
  "10968", "10580", "10606", "11575", "07088", "07021", "10605", "07007", "10533", "11560",
  "10308", "07677", "07432", "07204", "07656", "07203", "10607", "11561", "10962", "11554",
  "07006", "07463", "07036", "11520", "07041", "10601", "10602", "11753", "07481", "10610",
  "07068", "07033", "11853", "07470", "10965", "07645", "10312", "11569", "10913", "07008",
  "11765", "10523", "07004", "11566", "11802", "07458", "11801", "07401", "07039", "11732",
  "07474", "10603", "07016", "07078", "11710", "10577", "11709", "11756", "07081", "07065",
  "11815", "10573", "10960", "10591", "11771", "07001", "10604", "07417", "07027", "11791",
  "07064", "11775", "07035", "10309", "11793", "11773", "10994", "07058", "07077", "07440",
  "10954", "07066", "10595", "07446", "07902", "11714", "07999", "07901", "10532", "07936",
  "07091", "07090", "07092", "06836", "11783", "11803", "07067", "11797", "07436", "07444",
  "10989", "07095", "06830", "07082", "10307", "11758", "10977", "07442", "08830", "11804",
  "07076", "07932", "07034", "07430", "07734", "07045", "10594", "08861", "10982", "07928",
  "07758", "11737", "10952", "07457", "06831", "10570", "08862", "11724", "07974", "07718",
  "06878", "07054", "07023", "07732", "11762", "07737", "08863", "07940", "11735", "06870",
  "10510", "07495", "07981", "07752", "07716", "07420", "06807", "06910", "07922", "08820",
  "07062", "10920", "10956", "07465", "07735", "07061", "10504", "07961", "08832", "10901",
  "10545", "08840", "11747", "07730", "07748", "10931", "07935", "11701", "11743", "08879",
  "07403", "07927", "07760", "07405", "06904", "06911", "06912", "06913", "06914", "06926",
  "06927", "07721", "06901", "06902", "07046", "08837", "07060", "07005", "07069", "11726",
  "07799", "10514", "07080", "07704", "07976", "11760", "07933", "07962", "07963", "10927",
  "11798", "10562", "08859", "08818", "10974", "11757", "07063", "11704", "06905", "11746",
  "06906", "07701", "07878", "07960", "07456", "07950"
];

export const validateZipcode = (zipcode) => {
  if (!zipcode || zipcode.trim() === "") {
    return { isValid: false, error: "Please enter your zip code." };
  }

  // Remove any formatting and get just the 5-digit zip
  const cleanZip = zipcode.replace(/\D/g, "").slice(0, 5);

  if (cleanZip.length !== 5) {
    return { isValid: false, error: "Please enter a valid 5-digit zip code." };
  }

  if (!SERVICE_AREA_ZIPCODES.includes(cleanZip)) {
    return {
      isValid: false,
      error: "Sorry, we don't currently service your area. We serve NYC, majority of Long Island, and parts of New Jersey and Connecticut."
    };
  }

  return { isValid: true, error: null };
};

export const validateMonthlyFields = (
  name,
  address,
  zip,
  phone,
  email,
  selectedDate,
  selectedTime,
  confirmedInteriorPackage,
  confirmedExteriorPackage
) => {
  // Check if name is filled
  if (!name || name.trim() === "") {
    toast.error("Please enter your name.");
    return false;
  }

  // Check if address is filled
  if (!address || address.trim() === "") {
    toast.error("Please enter your address.");
    return false;
  }

  // Check if zip code is filled
  if (!zip || zip.trim() === "") {
    toast.error("Please enter your zip code.");
    return false;
  }

  // Validate zip code format
  const zipPattern = /^\d{5}(-\d{4})?$/;
  if (!zipPattern.test(zip)) {
    toast.error("Please provide a valid zip code (e.g., 12345 or 12345-6789).");
    return false;
  }

  // Check if phone number is filled
  if (!phone || phone.trim() === "") {
    toast.error("Please enter your phone number.");
    return false;
  }

  // Validate phone number format
  const phonePattern = /^\(?\d{3}\)?[-.\s]?\d{3}[-.\s]?\d{4}$/;
  if (!phonePattern.test(phone)) {
    toast.error("Please enter a valid phone number.");
    return false;
  }

  // Check if email is filled
  if (!email || email.trim() === "") {
    toast.error("Please enter your email address.");
    return false;
  }

  // Validate email format
  const emailPattern = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i;
  if (!emailPattern.test(email)) {
    toast.error("Please enter a valid email address.");
    return false;
  }

  // Validate service selection
  if (!confirmedInteriorPackage && !confirmedExteriorPackage) {
    toast.error("Please select at least one service package.");
    return false;
  }

  // Validate date selection
  if (!selectedDate) {
    toast.error("Please select an appointment date.");
    return false;
  }

  // Validate time selection
  if (!selectedTime) {
    toast.error("Please select an appointment time.");
    return false;
  }

  return true;
};

export const formatPhoneNumber = (value) => {
  // Remove all non-digit characters
  const phoneNumber = value.replace(/\D/g, "");

  // Format as (XXX) XXX-XXXX
  if (phoneNumber.length >= 6) {
    return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(
      3,
      6
    )}-${phoneNumber.slice(6, 10)}`;
  } else if (phoneNumber.length >= 3) {
    return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;
  } else {
    return phoneNumber;
  }
};

export const formatZipCode = (value) => {
  // Remove all non-digit characters except hyphens
  const zipCode = value.replace(/[^\d-]/g, "");

  // Limit to 10 characters (12345-6789 format)
  if (zipCode.length > 10) {
    return zipCode.slice(0, 10);
  }

  return zipCode;
};
